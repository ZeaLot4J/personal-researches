#+STARTUP: hideall
#+STARTUP: hidestars
#+PROPERTY: CLOCK_INTO_DRAWER t
* Notes
#+CATEGORY notes

** Exception Handling in the lastest SpringMVC 			  :springmvc:
   1. Use @ResponseStatus annotation
   2. Throw ResponseStatusException
   3. Define a class with @ControllerAdvice annotation, then annotate a handle method with @ExceptionHandler, it's a global way
   4. Use ResponseEntity's builder methods such as ResponseEntity.status(HttpStatus.NOT_FOUND).body(obj) instead of new ResponseEntity()
  <2019-04-24 周三 23:37>
** Kmacro's tricks 						      :emacs:
   f7 can define macro and insert a counter
   kmacro-set-format title%d, this will generate a title sequence
  <2019-04-20 周六 23:00>
** Rectangle is powerful 					      :emacs:
   C-x SPACE: rectangle mark region
   C-x r t: replace string into marked rectangle region for each line
   C-s: I-search will mark starter point and end point automatically
  <2019-04-20 周六 22:09>

** 4 ways of passing query multiple parameters to sql statement in Mybatis :mybatis:
   1) #{param1} #{param2} #{arg0} #{arg1}, don't use this problematic way
   2) @Param, recommend this
   3) paramMap, recommend
   4) Java entity, recommend
   5) actually you can use any name within #{} when there is only one param.
   for details, see [[https://blog.csdn.net/youanyyou/article/details/79406486]]
  <2018-12-22 周六 14:55>
** The mapper.xml and mapper interface 				    :mybatis:
   In mapper.xml, namespace specify the mapper(Dao) interface qualified name.
   in <mappers> tag, <mapper resource="the location of mapper xml" /> specify
   the location of mapper xml, 
   <mapper class="the qualified name of mapper interface"/> specify the location
   of mapper interface, which requires the mapper.xml and mapper.java interface
   must be in the same directory, and the <package name="package name of mapper interface"/>
   is the same, but it is more powerful since it can auto scan the specified the package.
   
   we often do like this below:
   #+BEGIN_SRC cmd
note the UserMapper.java and UserMapper.xml's directory structure
+---src
|   +---main
|   |   +---java
|   |   |   \---net
|   |   |       \---zealot
|   |   |           \---blog
|   |   |               +---dao
|   |   |               +---entity
|   |   |               |       Blog.java
|   |   |               |       Comment.java
|   |   |               |       User.java
|   |   |               |
|   |   |               +---mapper
|   |   |               |       UserMapper.java
|   |   |               |
|   |   |               +---servlet
|   |   |               \---util
|   |   |                       MybatisUtils.java
|   |   |
|   |   +---resources
|   |   |   |   database.properties
|   |   |   |   log4j.properties
|   |   |   |   mybatis-config.xml
|   |   |   |
|   |   |   \---net
|   |   |       \---zealot
|   |   |           \---blog
|   |   |               \---mapper
|   |   |                       UserMapper.xml
|   |   |

   #+END_SRC
   <2018-12-22 周六 01:48>
** varStatus in jstl's forEach tag				       :jstl:
   <c:forEach varStatus="status" >
   ${status.index} start with 0
   ${status.count} start with 1
   ${status.current} current item
   ${status.first} is first?
   ${status.last} is last?
   </c:forEach>
   
  <2018-12-20 周四 01:51>
** The steps to launch an ActiveJDBC with sql logs		 :activejdbc:
   1) dependencies
   #+BEGIN_SRC xml
<dependency>
	<groupId>org.javalite</groupId>
	<artifactId>activejdbc</artifactId>
	<version>2.2</version>
</dependency>
<dependency>
	<groupId>mysql</groupId>
	<artifactId>mysql-connector-java</artifactId>
	<version>5.1.47</version>
</dependency>
<dependency>
	<groupId>junit</groupId>
	<artifactId>junit</artifactId>
	<version>4.12</version>
	<scope>test</scope>
</dependency>
<dependency>
	<groupId>org.javalite</groupId>
	<artifactId>activejdbc-instrumentation</artifactId>
	<version>2.2</version>
	<type>maven-plugin</type>
</dependency>
<build>
	<pluginManagement>
		<plugins>
			<plugin>
				<groupId>org.javalite</groupId>
				<artifactId>activejdbc-instrumentation</artifactId>
				<version>2.2</version>
				<executions>
					<execution>
						<phase>process-classes</phase>
						<goals>
							<goal>instrument</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</pluginManagement>
</build>
   #+END_SRC
   2) mvn activejdbc-instrumentation:instrument
   3) add -Dactivejdbc.log within the VM arguments if we want to see the sql log in the console
   <2018-12-19 周三 01:11>
** If something wrong about mvn plugin happens, wrap plugins within <pluginManagement> :maven:
  <2018-12-18 周二 22:24>
** we cannot concatenate query string after the dispatcher url in Servlet :java:
   request.getRequestDispatcher("product&action=show").forward(request, response);
   404 Not Found
   /${contextPath}/product&action=show
  <2018-12-16 周日 22:42>
** getCurrentSession() return a thread local session		  :hibernate:
  <2018-12-15 周六 17:12>
** JoinColumn and MappedBy					  :hibernate:
   [[http://www.cnblogs.com/chiangchou/p/mappedBy.html]]
  <2018-12-14 周五 01:18>
** Use persist and merge method only				  :hibernate:
  <2018-12-13 周四 01:44>
** id generating strategy					  :hibernate:
   increment: generated by hibernate in the memory, the maximum of id plus one each time.
   identity: determined and generated by database.
   sequence: generated via sequence.
   native: generating strategy is smartly determined by database.
  <2018-12-12 周三 21:53>
** <property name="hibernate.current_session_context_class">thread</property> :hibernate:
   thread: local transaction
   jta: global transaction
  <2018-12-12 周三 21:29>
** hbm2ddl.auto							  :hibernate:
   create: drop the table schema first, then create the table.
   update(most used): create the table schema if not existed, or update the table.
  <2018-12-12 周三 21:24>
** principle of Dependency Injection				       :java:
   service consumer    interface service     service producer    assembler
   DI is:
   the service consumer take a dependency on service interface, the service producer implements
   service interface, the assembler take responsibility to assemble the service into consumer.
   thus, consumer is not dependent on service directly, assembler will do all the things.
  <2018-12-11 周二 23:46>
** HQL CRUD 							  :hibernate:
   from User where id=:id
   query.list()

   delete from User where id=:id
   query.executeUpdate(user);

   update User set name=:name, password=:password where id=:id
   query.executeUpdate(user);

   query.save(user);
  <2018-12-11 周二 02:27>
** a series of getPath method in Servlet api			       :java:
request.getContextPath(); // project name
request.getServletPath(); // servlet path name

request.getPathInfo(); // real url - servlet path
// if servlet-mapping is /dosomething/*, and real path is /dosomething/abc/def
// then path info is /abc/def, querystring will no be included if any.

request.getRequestURI(); // context path + servlet path
request.getRequestURL(); // http://localhost:8080/projectname/servletpath
  <2018-12-09 周日 23:58>
** When define event function in Component class, use handle = () => {} syntax :react:
   It's supported by create-react-app though it is experimental up to now, 
   or you can do this.handle = this.handle.bind(this) in the constructor too.
  <2018-12-09 周日 15:27>
** This in arrow function is lexical scoped while dynamic scoped in anonymous function :javascript:
   use arrow function and class keywords more, please
   <2018-12-09 周日 14:41>
** projectile is a nice tool to quick search file name in projects    :emacs:
   just add an empty .projectile file in the directory throughout which you
   want to search, then M-x projectile-find-file.
  <2018-12-09 周日 04:26>
** How to search file through file name in windows		      :batch:
   where /r path\ filename
  <2018-12-09 周日 04:03>
** How to full-text search in certain directory in windows	      :batch:
   findstr /n /s "string" path\*
   find /n "string" path\*
  <2018-12-09 周日 03:37>
** How to rename current buffer in Emacs			      :emacs:
   #+BEGIN_SRC emacs-lisp
(rename-buffer)
   #+END_SRC
   <2018-12-09 周日 02:40>
** How to launch only one Emacs process when open multiple files in windows :emacs:
   1. set (server-start) in init.el
   2. launch emacs using command "path\to\emacsclientw.exe" --no-wait --alternate-editor="path\to\runemacs.exe" "%1"
      - --alternate-editor: run runemacs.exe when there is no emacs server available
      - %1: the FILENAME
  <2018-12-09 周日 02:13>
** How to add items to the menu list when right clicking in file folders :registry:
   1. regedit, HKEY_CLASSES_ROOT\*\shell
   2. right click shell, add a new item named Emacs for instance
   3. right click Emacs, add a new item named command
   4. double click the default item, input "D:\emacs-25.3_1-x86_64\bin\runemacs.exe %1"
  <2018-12-09 周日 01:39>
** How to run React App in the Tomcat				      :react:
   1. modify the package.json, add {"homepage": "."}
   2. npm run build, a directory named build will be created
   3. copy all the content within the build dir to %CATALINA_HOME%'\webapps\react-app\
   4. run startup.bat in %CATALINA_HOME%\bin
   5. access local:host/react-app/index.html
  <2018-12-09 周日 01:14>
** Attentions about React					      :react:
1. Component needs to extend React.Component, it can be define as a function with the argument props if there's only render method，just return JSX in the function body.
2. Component's local state varibales should be stored in this.state, while the props store some variables from parent component.
3. The constructor must have a parameter props, super(props) should be called first.
4. It is necessary to change state with this.setState, immutability is important in React, or React cannot detect the changes of components.
6. Try best to lift the state to parent components，and receive params from parent components through props.
e.g.
#+BEGIN_SRC javascript

function MyComponent(props) {
  return (
    // JSX here
  );
}
class MyComponent extends React.Component {
  constructor(props) {
    super(props);
  }
  
  func1() {

  }
  func2() {

  }

  render() {
    return (
      // JSX here
    );
  }
}
#+END_SRC
<2018-12-08 周六 19:15>
** Right click with shift pressed, the cmd will be listed in the menu :registry:
   There comes the issue, how to change win10's default powershell to cmd in the menu?
   in HKEY_CLASSES_ROOT\Directory\Background\shell\Powershell\command, grant yourself rights,
   rename the HideBasedOnVelocityId to ShowBasedOnVelocityId, the cmd will appear in the menu
   , and the powershell is converse.
   <2018-12-07 周五 23:29>
** <base href="<%= basePath%>" /> is used to specify the base path for relative url
   each relative url will be concatenated after the base path
   #+BEGIN_SRC java
<%
    String basePath = request.getScheme() + "://" + request.getServerName() + ":" + request.getServerPort() + request.getContextPath() + "/";
%>
   #+END_SRC
   
   <2018-12-07 周五 02:37>
** C-x ESC ESC to redo last complex command 			      :emacs:
  <2018-08-31 Fri 18:48>
** isearch-forward(C-s), isearch-forward-word(M-s w), isearch-forward-symbol(M-s .) and isearch-forward-regexp(C-M-s) are powerful searching tools besides swiper(f2) 
  <2018-08-31 Fri 18:49>
** recursive-edit and abort-recursive-edit are awesome!		      :emacs:
  <2018-08-31 Fri 18:47>
** Emacs artist-mode can make you draw any figures with characters using mouse, it's amazing! :emacs:
  <2018-08-30 Thu 20:17>
** In windows, how to delete applications completely and thoroughly? :windows:
   1) cd C:\Program Files\Common Files, delete relevant directories.
   2) cd C:\Windows\Downloaded Program Files, the same way.
   3) sysdm.cpl, delete hidden device.
   4) cd C:\Program Files, delete relevant directories.
   5) regedit, HKEY_CLASSES_ROOT\Applications.
   6) HKEY_CURRENT_USER\Software.
   7) HKEY_LOCAL_MACHINE\SOFTWARE.
   8) HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\services, to delete its registered services.
   9) HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\services\eventlog\Application, to delete its logs
   10) HKEY_CLASSES_ROOT, to delele its relevant items.
   11) delete its path variables.
  <2018-08-29 Wed 18:37>
  <2018-08-27 Mon 13:13>
** use MessageFormat.format() to format string like C#, it's preferable :java:
   #+BEGIN_SRC java
int planet = 7;
String event = "a disturbance in the Force";
String result = MessageFormat.format("At {1,time} on {1,date}, there was {2} on planet {0,number,integer}.", planet, new Date(), event);
// no error would occur when the parameters are more or less
   #+END_SRC 
   <2018-08-24 Fri 20:13>
** use String.format(formatString, object...) to format string like C language :java:
  <2018-08-24 Fri 20:07>
** Java Regex's search and replacement				       :java:
   Regex API:
   #+BEGIN_SRC java
Pattern.matches(regex, inputString); // the most convenient method to match regex with string
Pattern p = Pattern.compile(regex); // compile a regex
p.split(inputString); // same as inputString.split(delimiter)
p.splitAsStream(inputStream) // return a string stream

Matcher m = p.matcher(inputString);
// below is the difference among m.matches(), m.find() and m.lookingAt()
Pattern p = Pattern.compile("cat\\d+");
Matcher m = p.matcher("cat1 one cat2 two cat3s in the yard cat4");
m.matches(); // false, it will try to match the entire string
m.find(); // true, it will try to match the part of the string
m.group(); // cat2, because m.matches() changed the matching position, use m.reset() to reset the matching pos
m.find(); // true
m.group(); // cat3
m.lookingAt(); // true, always true, because it will try to partly match the string from the start char
m.group(); // cat1
m.lookingAt(); // true
m.group(); // cat1
m.lookingAt(); // true
m.group(); // cat1
#+END_SRC
   
   match and replace
   #+BEGIN_SRC java
StringBuffer sb = new StringBuffer();
Pattern p = Pattern.compile(regex);
Matcher m = p.matcher(sql);
int i = 0;
while (m.find() && i < values.length) {
    m.appendReplacement(sb, "'" + values[i] + "'");
    i++;
}
m.appendTail(sb);
return sb.toString();

   #+END_SRC
   <2018-08-24 Fri 16:26>
** difference between class.getResourceAsStream class.getClassLoader().getResourceAsStream() :java:
   classLoader().getResourceAsStream() will defaultly load file from root classpath, while class.getResourceAsStream() will load file from current file's relative path.
   here is a common way to load resouce files: Class.class.getResourceAsStream("/log4j.properties"); // Note, '/' is required.
  <2018-08-23 Thu 14:23>
** jaxb annotation						       :java:
   1. @XmlRootElement: indicate it's a root element of xml
   2. @XmlElement: indicate it will be included in xml as an element
   3. @XmlAttribute: indicate it will be included in xml as an attribute
   4. @XmlTransient: indicate it will be ignored in xml
   5. @XmlElementWrapper: indicate the collection will be wrapped
   6. @XmlType(propOrder={field1, field2, filed3 ...}): specify the order of xml's elements
   --note: don't use @XmlElement, @XmlAttribute, @XmlElementWrapper at the field, which will cause duplicate name errors, instead use them at the setter/getter
   --@XmlAccessorType(XmlAccessType.FIELD) can make all the non-transient and non-static fields to xml automatically without those annotations, such as @XmlElement above.
  <2018-08-16 Thu 19:20>
** JUnit and Hamcrest maven dependency				       :java:
   #+BEGIN_SRC xml
<dependency>
	<groupId>junit</groupId>
	<artifactId>junit</artifactId>
	<version>4.12</version>
	<scope>test</scope>
	<exclusions>
		<exclusion>
			<groupId>org.hamcrest</groupId>
			<artifactId>hamcrest-core</artifactId>
		</exclusion>
	</exclusions>
</dependency>
<!-- This will get hamcrest-core automatically -->
<dependency>
	<groupId>org.hamcrest</groupId>
	<artifactId>hamcrest-library</artifactId>
	<version>1.3</version>
	<scope>test</scope>
</dependency>
   #+END_SRC 
   <2018-08-09 Thu 12:19>
** mvn dependency:tree to list the dependency relations		      :maven:
  <2018-08-09 Thu 12:00>
** Java BundleResource's usage					       :java:
#+BEGIN_SRC java
/resource/config.properties
BundleResource resource = BundelResource.getBundle("config");
resource.getString(keyname);
#+END_SRC
  <2018-08-08 Wed 17:19>
